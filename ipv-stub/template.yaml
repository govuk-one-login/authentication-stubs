AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: IPV stub

#      Tags:
#        Service: IPV stubs
#        Source: govuk-one-login/authentication-stubs

Parameters:
  Environment:
    Type: String
    Description: The name of the environment to deploy to
    Default: none
  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: none
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Default: none

Mappings:
  EnvironmentConfiguration:
    dev:
      ipvStubDomainName: ipvstub.signin.dev.account.gov.uk
      hostedZoneId: "Z10132222WVQ7U47816SI"

Conditions:
  UseCodeSigning: !Not [!Equals [none, !Ref CodeSigningConfigArn]]
  UsePermissionsBoundary: !Not [!Equals [none, !Ref PermissionsBoundary]]

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeUri: .
    Runtime: nodejs20.x
    Architectures:
      - arm64

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-ApiGateway
      StageName: Live
      AlwaysDeploy: true
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "Auth Team IPV Stub"
          version: "1.0"
        paths:
          /authorize:
            get:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubAuthorizeLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
            post:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubAuthorizeLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
          /token:
            post:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubTokenLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
          /reverification:
            get:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubReverificationLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: "*"

  ApiGatewayInvokePermissionForLambda:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !GetAtt IPVStubAuthorizeLambda.Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com

  ApiGatewayMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      Stage: Live
      DomainName: !Ref GatewayDomain
      RestApiId: !Ref ApiGateway

  IPVStubAuthorizeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/ipv-authorize.handler
      LoggingConfig:
        LogGroup: !Ref IPVStubAuthorizeLambdaLogGroup
      Environment:
        Variables:
          ENVIRONMENT: !Sub ${Environment}
          IPV_AUTHORIZE_PRIVATE_ENCRYPTION_KEY: "{{resolve:secretsmanager:/dev/stubs/ipv-stub-private-key:SecretString}}"
          IPV_AUTHORIZE_PUBLIC_SIGNING_KEY: ""
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReverificationTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: arn:aws:secretsmanager:eu-west-2:975050272416:secret:/dev/stubs/ipv-stub-private-key-KQsLL3
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /authorize
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /authorize
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/endpoints/ipv-authorize.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Minify: true
        Sourcemap: true
        Target: node20

  IPVStubAuthorizeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-${AWS::StackName}-ipv-stub-authorize"
      RetentionInDays: 30

  IPVStubTokenLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/ipv-token.handler
      LoggingConfig:
        LogGroup: !Ref IPVStubTokenLambdaLogGroup
      Environment:
        Variables:
          ENVIRONMENT: !Sub ${Environment}
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReverificationTable
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /token
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/endpoints/ipv-token.ts
        Minify: true
        Sourcemap: true
        Target: node20

  IPVStubTokenLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-${AWS::StackName}-ipv-stub-token"
      RetentionInDays: 30

  IPVStubReverificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/ipv-reverification.handler
      LoggingConfig:
        LogGroup: !Ref IPVStubReverificationLambdaLogGroup
      Environment:
        Variables:
          ENVIRONMENT: !Sub ${Environment}
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref ReverificationTable
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /reverification
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/endpoints/ipv-reverification.ts
        Minify: true
        Sourcemap: true
        Target: node20

  IPVStubReverificationLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-${AWS::StackName}-ipv-stub-reverification"
      RetentionInDays: 30

  ReverificationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-AuthIpvStub-Reverification
      KeySchema:
        - AttributeName: ReverificationId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: ReverificationId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Name
          Value: Reverification

  ReverificationTableWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowReverificationWriteAccess
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt ReverificationTable.Arn

  ReverificationTableReadAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowReverificationTableReadAccess
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:Get*
            Resource: !GetAtt ReverificationTable.Arn

  GatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !FindInMap [ EnvironmentConfiguration, !Ref Environment, ipvStubDomainName ]
      SecurityPolicy: TLS_1_2
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !FindInMap [ EnvironmentConfiguration, !Ref Environment, ipvStubDomainName ]
      ValidationMethod: DNS

# todo ,
# currently records set and ACM vadiladation is done Manaully in old dev account 
# Once the signin.dev.account.gov.uk zone is migrated to new dev account we need to bring this is Code 
  
  #Domain:
    #Type: AWS::Route53::RecordSet
    #Properties:
      #HostedZoneId: !FindInMap [ EnvironmentConfiguration, !Ref Environment, hostedZoneId ]
      #Type: A
      #Name: !FindInMap [ EnvironmentConfiguration, !Ref Environment, ipvStubDomainName ]
      #AliasTarget:
        #DNSName: !GetAtt GatewayDomain.RegionalDomainName
        #HostedZoneId: !GetAtt GatewayDomain.RegionalHostedZoneId

