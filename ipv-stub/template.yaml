AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions
Description: IPV stub

#      Tags:
#        Service: IPV stubs
#        Source: govuk-one-login/authentication-stubs

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - build

  SubEnvironment:
    Type: String
    Description: >
      When deploying to dev, optionally configure which sub-environment to deploy to
      i.e. authdev1, authdev2. This feature is not available for route-to-live environments
    Default: none
    AllowedValues:
      - none
      - authdev1
      - authdev2

  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: none

  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Default: none

Mappings:
  EnvironmentConfiguration:
    dev:
      ipvStubDomainName: ipvstub.signin.dev.account.gov.uk
      hostedZoneId: "Z07405851J4NJYGEP1PS7"
      ipvprivateencryptionkey: "{{resolve:secretsmanager:/dev/stubs/ipv-stub-private-key::::13d29a8d-453e-4786-a485-91eb59967ba8}}"
      authpublicsigningkeyevcs: "{{resolve:secretsmanager:/dev/stubs/auth-evcs-public-signing-key::::c891b2a3-08c4-4bc6-8c3a-4134b4d75eeb}}"
      authpublicsigningkeyipv: "{{resolve:secretsmanager:/dev/stubs/auth-reverification-public-signing-key::::5654ae99-de8f-4f54-a6a6-f8c13b7139f8}}"
      authIpvPublicSigningKeyJwksEndpoint: "https://auth.dev.account.gov.uk/.well-known/reverification-jwk.json"

    authdev1:
      ipvStubDomainName: ipvstub.signin.authdev1.dev.account.gov.uk
      hostedZoneId: "Z01488663SVMGDFYGEX88"
      ipvprivateencryptionkey: "{{resolve:secretsmanager:/authdev1/stubs/ipv-stub-private-key::::ea3de3c0-a3bb-41f6-9df6-dbf73ee9f75f}}"
      authpublicsigningkeyevcs: "{{resolve:secretsmanager:/authdev1/stubs/auth-evcs-public-signing-key::::d2a26d29-f879-49b7-a8d9-f3eea9948421}}"
      authpublicsigningkeyipv: "{{resolve:secretsmanager:/authdev1/stubs/auth-reverification-public-signing-key::::a0460ed9-9e30-4562-be70-f3b69d4cb35c}}"
      authIpvPublicSigningKeyJwksEndpoint: "https://auth.authdev1.sandpit.account.gov.uk/.well-known/reverification-jwk.json"

    authdev2:
      ipvStubDomainName: ipvstub.signin.authdev2.dev.account.gov.uk
      hostedZoneId: "Z0283478G72QVGV7VVBG"
      ipvprivateencryptionkey: "{{resolve:secretsmanager:/authdev2/stubs/ipv-stub-private-key::::78c42d33-23d3-4bc3-865a-1df55660a5bb}}"
      authpublicsigningkeyevcs: "{{resolve:secretsmanager:/authdev2/stubs/auth-evcs-public-signing-key::::a49b05c6-38f3-4a52-8423-d5d76791fc03}}"
      authpublicsigningkeyipv: "{{resolve:secretsmanager:/authdev2/stubs/auth-reverification-public-signing-key::::785a8715-d904-4951-9125-bfdb7edccc9f}}"
      authIpvPublicSigningKeyJwksEndpoint: "https://auth.authdev2.sandpit.account.gov.uk/.well-known/reverification-jwk.json"

    build:
      ipvStubDomainName: ipvstub.signin.build.account.gov.uk
      hostedZoneId: "Z09720813AWZDQSXZBWKJ"
      ipvprivateencryptionkey: "{{resolve:secretsmanager:/build/stubs/ipv-stub-private-key::::1c764b26-dbfe-488a-aacc-c33a33cdf7ee}}"
      authpublicsigningkeyevcs: "{{resolve:secretsmanager:/build/stubs/auth-evcs-public-signing-key::::3ef9f3d5-1599-4bc6-b2f8-4584496fc5b1}}"
      authpublicsigningkeyipv: "{{resolve:secretsmanager:/build/stubs/auth-reverification-public-signing-key::::d29ce375-b48b-4734-bb81-aa01d69c365b}}"
      authIpvPublicSigningKeyJwksEndpoint: "https://auth.build.account.gov.uk/.well-known/reverification-jwk.json"

Conditions:
  UseCodeSigning: !Not [!Equals [none, !Ref CodeSigningConfigArn]]
  UsePermissionsBoundary: !Not [!Equals [none, !Ref PermissionsBoundary]]
  UseSubEnvironment:
    Fn::And:
      - Fn::Equals:
          - !Ref Environment
          - dev
      - Fn::Not:
          - Fn::Equals:
              - !Ref SubEnvironment
              - none

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeUri: .
    Runtime: nodejs20.x
    Architectures:
      - arm64

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-ApiGateway
      StageName: Live
      AlwaysDeploy: true
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "Auth Team IPV Stub"
          version: "1.0"
        paths:
          /authorize:
            get:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubAuthorizeLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
            post:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubAuthorizeLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
          /token:
            post:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubTokenLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
          /reverification:
            get:
              responses:
                "200":
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IPVStubReverificationLambda.Arn}/invocations
                passThroughBehavior: "when_no_match"
                payloadFormatVersion: "2.0"
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: "*"

  ApiGatewayInvokePermissionForLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IPVStubAuthorizeLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  ApiGatewayMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: Certificate
    Properties:
      Stage: Live
      DomainName: !Ref GatewayDomain
      RestApiId: !Ref ApiGateway

  # Authorize lambda
  IPVStubAuthorizeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/ipv-authorize.handler
      Timeout: 30
      LoggingConfig:
        LogGroup: !Ref IPVStubAuthorizeLambdaLogGroup
      Environment:
        Variables:
          ENVIRONMENT: !If
            - UseSubEnvironment
            - !Ref SubEnvironment
            - !Ref Environment
          IPV_PRIVATE_ENCRYPTION_KEY: !FindInMap
            - EnvironmentConfiguration
            - !If
              - UseSubEnvironment
              - !Ref SubEnvironment
              - !Ref Environment
            - ipvprivateencryptionkey
          AUTH_PUBLIC_SIGNING_KEY_EVCS: !FindInMap
            - EnvironmentConfiguration
            - !If
              - UseSubEnvironment
              - !Ref SubEnvironment
              - !Ref Environment
            - authpublicsigningkeyevcs
          AUTH_PUBLIC_SIGNING_KEY_IPV: !FindInMap
            - EnvironmentConfiguration
            - !If
              - UseSubEnvironment
              - !Ref SubEnvironment
              - !Ref Environment
            - authpublicsigningkeyipv
          AUTH_IPV_PUBLIC_SIGNING_KEY_JWKS_ENDPOINT: !FindInMap
            - EnvironmentConfiguration
            - !If
              - UseSubEnvironment
              - !Ref SubEnvironment
              - !Ref Environment
            - authIpvPublicSigningKeyJwksEndpoint
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReverificationTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub
              - "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${env}/stubs/ipv-stub-private-key-*"
              - env:
                  !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /authorize
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /authorize
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/endpoints/ipv-authorize.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Minify: true
        Sourcemap: true
        Target: node20

  IPVStubAuthorizeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${env}-ipv-stub-authorize"
        - env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      RetentionInDays: 30

  # Token lambda
  IPVStubTokenLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/ipv-token.handler
      LoggingConfig:
        LogGroup: !Ref IPVStubTokenLambdaLogGroup
      Environment:
        Variables:
          ENVIRONMENT: !If
            - UseSubEnvironment
            - !Ref SubEnvironment
            - !Ref Environment
          AUTH_PUBLIC_SIGNING_KEY_IPV: !FindInMap
            - EnvironmentConfiguration
            - !If
              - UseSubEnvironment
              - !Ref SubEnvironment
              - !Ref Environment
            - authpublicsigningkeyipv
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ReverificationTable
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /token
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/endpoints/ipv-token.ts
        Minify: true
        Sourcemap: true
        Target: node20

  IPVStubTokenLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${env}-ipv-stub-token"
        - env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      RetentionInDays: 30

  # Reverification lambda
  IPVStubReverificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/ipv-reverification.handler
      LoggingConfig:
        LogGroup: !Ref IPVStubReverificationLambdaLogGroup
      Environment:
        Variables:
          ENVIRONMENT: !If
            - UseSubEnvironment
            - !Ref SubEnvironment
            - !Ref Environment
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref ReverificationTable
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /reverification
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/endpoints/ipv-reverification.ts
        Minify: true
        Sourcemap: true
        Target: node20

  IPVStubReverificationLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${env}-ipv-stub-reverification"
        - env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      RetentionInDays: 30

  ReverificationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${env}-AuthIpvStub-Reverification"
        - env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      KeySchema:
        - AttributeName: ReverificationId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: ReverificationId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Name
          Value: Reverification

  # Domain config
  GatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !FindInMap
        - EnvironmentConfiguration
        - !If
          - UseSubEnvironment
          - !Ref SubEnvironment
          - !Ref Environment
        - ipvStubDomainName
      SecurityPolicy: TLS_1_2
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  Certificate:
    Type: AWS::CertificateManager::Certificate
    DependsOn: ApiGatewayLiveStage
    Properties:
      DomainName: !FindInMap
        - EnvironmentConfiguration
        - !If
          - UseSubEnvironment
          - !Ref SubEnvironment
          - !Ref Environment
        - ipvStubDomainName
      ValidationMethod: DNS

  IPVdnsrecordsubdomain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !FindInMap
        - EnvironmentConfiguration
        - !If
          - UseSubEnvironment
          - !Ref SubEnvironment
          - !Ref Environment
        - hostedZoneId
      Type: A
      Name: !FindInMap
        - EnvironmentConfiguration
        - !If
          - UseSubEnvironment
          - !Ref SubEnvironment
          - !Ref Environment
        - ipvStubDomainName
      AliasTarget:
        DNSName: !GetAtt GatewayDomain.RegionalDomainName
        HostedZoneId: !GetAtt GatewayDomain.RegionalHostedZoneId
